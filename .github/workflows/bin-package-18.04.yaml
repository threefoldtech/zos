# Builds a single runtime package, this
# is similar to bin-package but always uses ubuntu:18.04 to
# build the package.
name: Build Extra Binary

on:
  workflow_call:
    inputs:
      package:
        description: "package to build"
        required: true
        type: string
    secrets:
      token:
        required: true
jobs:
  builder:
    name: builder
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v1
      - name: Set tag of build
        id: tag
        run: |
          ref="${{ github.ref }}"
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "reference=${ref#refs/tags/}" >> $GITHUB_OUTPUT
          else
            export reference="${{ github.sha }}"
            # in container we have do to this is bash because
            # the container default sh which has no support for substring
            bash -c 'echo "reference=${reference:0:7}" >> $GITHUB_OUTPUT'
          fi
      - name: Setup basesystem
        run: |
          cd bins
          ./bins-extra.sh --package basesystem
      - name: Build package (${{ inputs.package }})
        id: package
        run: |
          cd bins
          ./bins-extra.sh --package ${{ inputs.package }}
      - name: Publish flist (tf-autobuilder, ${{ steps.package.outputs.name }})
        if: success()
        uses: threefoldtech/publish-flist@master
        with:
          token: ${{ secrets.token }}
          action: publish
          user: tf-autobuilder
          root: bins/releases/${{ inputs.package }}
          name: ${{ steps.package.outputs.name }}.flist
      - name: Tagging
        uses: threefoldtech/publish-flist@master
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        with:
          token: ${{ secrets.token }}
          action: tag
          user: tf-autobuilder
          name: ${{ steps.tag.outputs.reference }}/${{ inputs.package }}.flist
          target: tf-autobuilder/${{ steps.package.outputs.name }}.flist
